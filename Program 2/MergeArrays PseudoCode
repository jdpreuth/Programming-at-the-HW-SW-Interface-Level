MergeArrays PseudoCode

//Declare variables
leftArrayIndex	<-	0
leftArraySize	<-	len1 * 4	
leftArrayValue	<-	0	
rightArrayIndex	<-	0	
rightArraySize	<-	len2 * 4	
rightArrayValue	<-	0	
outputIndex		<-	0
outputSize		<-	0

MERGE:

	//Check if the left index is valid
	if leftArrayIndex >= leftArraySize goto FINISH_RIGHT

	//Check if the right index is valid
	if rightArrayIndex >= rightArraySize goto FINISH_LEFT

	COMPARE_LEFT_RIGHT:
		load leftArrayValue
		load rightArrayValue
		if leftArrayValue >= rightArrayValue goto ADD_RIGHT
		ADD_LEFT:
			value[outputIndex] <- leftArrayValue
			outputIndex++
			outputSize++
			leftArrayIndex++
			goto MERGE
		ADD_RIGHT
			value[outputIndex] <- rightArrayValue
			outputIndex++
			outputSize++
			rightArrayIndex++
			goto MERGE

	FINISH_RIGHT:
		if rightArrayIndex >= rightArraySize goto OUTPUT
			load rightArrayValue
			value[outputIndex] <- rightArrayValue
			outputIndex++
			outputSize++
			rightArrayIndex++
			goto FINSIH_RIGHT

	FINISH_LEFT:
		if leftArrayIndex >= leftArraySize goto OUTPUT
			load leftArrayValue
			value[outputIndex] <- leftArrayValue
			outputIndex++
			outputSize++
			leftArrayIndex++
			goto FINISH_LEFT

OUTPUT:

	outputIndex <- 

	PRINT_FORWARD:
		if outputIndex >= outputSize goto PREP_PRINT_BACKWARD
			print value[outputIndex]
			print space
			outputIndex++
			goto PRINT_FORWARD

	PREP_PRINT_BACKWARD:
		outputIndex--
		print line
		goto PRINT_BACKWARD

	PRINT_BACKWARD:
		if outputIndex < 0 goto TERMINATE
			print value[outputIndex]
			print space
			outputIndex--
			goto PRINT_BACKWARD 

TERMINATE:
	terminate 


.data
len1:   .word   3            # How many things are in array in1
in1:    .word   1, 3, 5      # First integer array, should be in ascending order!
len2:   .word   4            # How many things are in array in2
in2:    .word   3, 4, 8, 10  # Second integer array, should be in ascending order!
out:    .space  28           # Output array, should be of size 4 * (len1 + len2)